/*
// 最新の Forge-Gradle を使用する場合はこちらのビルドスクリプトを使用する
buildscript {
  repositories {
    jcenter()
    maven {
      name = 'forge'
      url  = 'http://files.minecraftforge.net/maven'
    }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
  }
}
apply plugin: 'net.minecraftforge.gradle.forge'
*/

// Forge-Gradle の安定版を使用する
plugins {
  id 'net.minecraftforge.gradle.forge' version '2.0.2'
}

// 基本情報の設定
group            = bldOpt.jar.groupId
archivesBaseName = bldOpt.jar.baseName ?: modInf.name
version          = modInf.version

// Forge 環境の設定
minecraft {
  version          = modInf.mcversion
  runDir           = 'run'
  mappings         = 'snapshot_20141130'
  makeObfSourceJar = false
}

// コンパイルタスクの設定
tasks.withType( AbstractCompile ) {
  sourceCompatibility = bldOpt.languageLevel
  targetCompatibility = bldOpt.languageLevel

  if ( options ) { options.encoding = bldOpt.encoding }
}

// リポジトリの設定
repositories {
  def repoOpt = bldOpt.maven.repositories

  if ( repoOpt.central ) { mavenCentral() }
  if ( repoOpt.local )   { mavenLocal()   }
  if ( repoOpt.jcenter ) { jcenter()      }

  repoOpt.url.each       { maven.url it   }
}

// 依存関係の設定
dependencies {
  bldOpt.dependencies.each { k, v ->
    v.each { "$k" it }
  }
}

// jar のアトリビュートを設定
jar.manifest.attributes = bldOpt.jar.manifest.attributes


// タスク定義･事前準備 ********************************


// メインのソースセットを拡張プロパティにバインド
project.ext.mainSourceSet = sourceSets[ SourceSet.MAIN_SOURCE_SET_NAME ]


// コンパイル前の変数展開時に参照される辞書を返す関数
def replacements() { [
  '@@MODID@@':       modInf.modid,
  '@@MODNAME@@':     modInf.name,
  '@@MODVERSION@@':  modInf.version,
  '@@UPDATEJSON@@':  modInf.updateUrl
] }

// オブジェクトのすべての要素を文字列型に変換する関数群
def e2s( Map    obj ) { obj.collectEntries { k, v -> [ "$k": e2s( v ) ] } }
def e2s( List   obj ) { obj.collect { e2s( it ) }                         }
def e2s( Object obj ) { String.valueOf( obj )                             }

// mcmod.info に記述される内容を返すクロージャ
def genMcmodInfoText = {
  def nl = System.getProperty( 'line.separator' )
  def jb = new groovy.json.JsonBuilder( e2s( modInf ) )
  "[$nl${ jb.toPrettyString() }$nl]"
}


// タスク定義 ********************************


// メインのソースディレクトリを作成するタスク
task makeMainSourceDirs {
  // 作成対象となるディレクトリ一覧を定義
  ext.sourceDirs = mainSourceSet.allSource.srcDirs

  // setupDecompWorkspace が失敗していなければ処理を実行
  onlyIf { setupDecompWorkspace.state.failure == null }

  // 作成対象となるディレクトリがすでに存在していれば処理をスキップ
  outputs.files project.files( sourceDirs )

  doLast { sourceDirs.each project.&mkdir }
}

// アセットディレクトリを作成するタスク
task makeAssetsDir( dependsOn: makeMainSourceDirs ) {
  ext {
    // 出力先ディレクトリ ( ソースディレクトリ ) 一覧を定義
    destinationDirs = mainSourceSet.resources.srcDirs

    // 作成対象となるディレクトリ一覧を返すクロージャ
    assetsDirs = {
      destinationDirs.collect { new File( it, "assets/${ modInf.modid }" ) }
    }
  }

  // makeMainSourceDirs が失敗していなければ処理を実行
  onlyIf { makeMainSourceDirs.state.failure == null }

  // 作成対象となるディレクトリがすでに存在していれば処理をスキップ
  outputs.files project.files( assetsDirs() )

  doLast { assetsDirs().each project.&mkdir }
}

// mcmod.info ファイルを出力するタスク
task genMcmodInfo {
  // 実行されるタスクに makeMainSourceDirs も指定されている場合
  // このタスクは makeMainSourceDirs よりも後に実行される
  mustRunAfter makeMainSourceDirs

  ext {
    // 出力先ディレクトリ ( ソースディレクトリ ) 一覧を定義
    destinationDirs = mainSourceSet.resources.srcDirs

    // 出力ファイル一覧を返すクロージャ
    outputFiles = {
      destinationDirs.collect { new File( it, 'mcmod.info' ) }
    }
  }

  // setupDecompWorkspace が失敗していなければ処理を実行
  onlyIf { setupDecompWorkspace.state.failure == null }

  // mcmod.info の内容に変更があれば処理を実行
  inputs.property 'mcmod_info', genMcmodInfoText

  // 作成対象となるファイルが存在しなければ処理を実行
  outputs.files project.files( outputFiles() )

  doLast {
    def infoText = genMcmodInfoText()
    outputFiles()*.text = infoText
  }
}

// ソースコードのアーカイブを出力するタスクを定義
if ( bldOpt.jar.archive.source && hasTask( 'sourceMainJava' ) ) {
  task sourcesJar( type: Jar, dependsOn: [ processResources, sourceMainJava ] ) {
    classifier = 'sources'
    from processResources.destinationDir
    from sourceMainJava.output
  }

  // scala のソースを取り込むように設定
  if ( hasTask( 'sourceMainScala' ) ) {
    sourcesJar.dependsOn sourceMainScala
    sourcesJar.from sourceMainScala.output
  }

  // sourcesJar タスクを有効にする
  artifacts.archives sourcesJar
}

// ドキュメントのアーカイブを出力するタスクを定義
if ( bldOpt.jar.archive.document ) {
  if ( hasTask( 'scaladoc' ) && hasTask( 'sourceMainScala' ) ) {
    task scaladocJar( type: Jar, dependsOn: scaladoc ) {
      classifier = 'scaladoc'
      from scaladoc.destinationDir
    }
    // scaladocJar タスクを有効にする
    artifacts.archives scaladocJar

    scaladoc.source = project.fileTree( sourceMainScala.output )
  }
  else if ( hasTask( 'javadoc' ) && hasTask( 'sourceMainJava' ) ) {
    task javadocJar( type: Jar, dependsOn: javadoc ) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }
    // javadocJar タスクを有効にする
    artifacts.archives javadocJar

    javadoc.source = project.fileTree( sourceMainJava.output )
  }
}


// タスクの設定を調整 ********************************


// リソースファイルコピー前に mcmod.info を生成するように設定
processResources.dependsOn genMcmodInfo

// 開発環境構築処理の最後にメインソースディレクトリと
// mcmod.info を生成するように設定
setupDecompWorkspace.finalizedBy makeMainSourceDirs,
                                 genMcmodInfo

// ソースコードコピー･タスクに変数展開用の辞書をセットする
tasks.withType( net.minecraftforge.gradle.user.TaskSourceCopy ) {
  it.replace( replacements() )
}
